# -*- coding: utf-8 -*-
"""numpy-uygulama-keremyakaner

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yp0K0dLo7F1wVRTjFIB5Y9ybbmzMedVc
"""

# NumPy Başlarken
import numpy as np  # numpy kütüphanesini ekler

import numpy as np  # NumPy kütüphanesini ekler

# NumPy Dizisi Oluşturma
arr = np.array([1, 2, 3, 4, 5])
print(arr)
print()

# zeros, ones, arange
print(np.zeros(5))  # 5 elemanlı sıfırlardan oluşan bir dizi oluşturup ekrana yazar
print()  # Çıktının okunaklı gözükmesi için çıktılar arasında bir satır boşluk bırakır
print(np.ones((3, 3)))  # 3x3'lük birler matrisi oluşturup ekrana yazar
print()  # Çıktının okunaklı gözükmesi için çıktılar arasında bir satır boşluk bırakır
ara = np.arange(10, 21)  # 10 ile 20 arasında artan bir dizi oluştur
print(ara)  # Oluşturulan diziyi ekrana yazar

import numpy as np  # NumPy kütüphanesini ekler

# NumPy Dizi İndeksleme
dizi = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  # 3x3 boyutunda iki boyutlu bir dizi oluşturur
print(dizi[2][1])  # Dizinin üçüncü satırındaki ikinci elemanı ekrana yazar

import numpy as np  # NumPy kütüphanesini ekler

# NumPy Dizi Dilimleme
dizi = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  # 3x3 boyutunda iki boyutlu bir dizi oluşturur
print(dizi[:, :2])  # Sadece 1. ve 2. sütunları içeren alt diziyi elde edip ekrana yazar

import numpy as np  # NumPy kütüphanesini ekler

# NumPy Veri Türleri
arr = np.array([1, 2, 3])  # Bir NumPy dizisi oluşturur ve bunu arr adlı değişkene atar
print(arr.dtype)  # arr değişkeninin veri tipini ekrana yazar

arr_float = np.array(arr, dtype=float)  # arr dizisini float veri tipine dönüştürüp arr_float adlı değişkene atar
print(arr_float.dtype)  # arr_float değişkeninin veri tipini ekrana yazar

import numpy as np  # NumPy kütüphanesini ekler

# NumPy copy ve view
arr = np.array([1, 2, 3])  # Bir NumPy dizisi oluşturur ve bunu arr adlı değişkene atar
copy_arr = arr.copy()  # copy() fonksiyonu orijinal dizinin bağımsız bir kopyasını oluşturur. Kopya üzerinde yapılan değişiklikler orijinal diziyi etkilemez
view_arr = arr.view()  # view() fonksiyonu orijinal dizinin görünümünü oluşturur. Görünüm üzerinde yapılan değişiklikler orijinal diziyi etkiler
copy_arr[0] = 999  # copy_arr değişkeninin ilk elemanını 999 olarak değiştirir
view_arr[1] = 888  # view_arr değişkeninin ikinci elemanını 888 olarak değiştirir

print(arr)  # arr değişkenini ekrana yazar
print(copy_arr)  # copy_arr değişkenini ekrana yazar
print(view_arr)  # view_arr değişkenini ekrana yazar

import numpy as np  # NumPy kütüphanesini ekler

# NumPy Dizi Boyutları
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])  # İki boyutlu bir NumPy dizisi oluşturur ve bunu arr adlı değişkene atar
print(arr.shape)  # shape özelliği ile dizinin boyutları ile ilgili bilgi alıyoruz. 3 satır ve 4 sütundan oluşuyor

import numpy as np  # NumPy kütüphanesini ekler

# NumPy Dizisini Yeniden Şekillendirme
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])  # 1'den 12'ye kadar olan bir NumPy dizisi oluşturur ve bunu arr adlı değişkene atar
reshaped_arr = arr.reshape(3, 4)  # arr dizisini 3 satır ve 4 sütunlu matrise dönüştürüp reshaped_arr adlı değişkene atar
print(reshaped_arr)  # Yeniden şekillendirilmiş diziyi ekrana yazar

import numpy as np  # NumPy kütüphanesini ekler

# NumPy Dizisi Üzerinde İterasyon
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])  # Bir NumPy dizisi oluşturur ve bunu arr adlı değişkene atar
for x in arr:  # arr dizisinin her bir satırı üzerinde döngü kurar
    for yeni in x:  # Satırdaki her bir eleman üzerinde döngü kurar
        print(yeni)  # Her bir elemanı ekrana yazdırır

import numpy as np  # NumPy kütüphanesini ekler

# NumPy Dizi Birleştirme
a = np.array([[1, 2], [3, 4]])  # a dizisini oluşturur
b = np.array([[5, 6], [7, 8]])  # b dizisini oluşturur

dikey = np.concatenate((a, b), axis=0)  # a ve b dizisini dikey olarak birleştirir
yatay = np.concatenate((a, b), axis=1)  # a ve b dizisini yatay olarak birleştirir

print(dikey)  # Dikey birleştirilmiş diziyi ekrana yazdırır
print()  # Çıktının okunaklı gözükmesi için çıktılar arasında bir satır boşluk bırakır
print(yatay)  # Yatay birleştirilmiş diziyi ekrana yazdırır

import numpy as np  # NumPy kütüphanesini ekler

# NumPy Dizi Bölme
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])  # 1'den 12'ye kadar olan bir NumPy dizisi oluşturur ve bunu arr adlı değişkene atar
split_arr = np.array_split(arr, 3)  # Diziyi 3 eşit parçaya böler ve split_arr adlı değişkene atar
print(split_arr)  # Bölünmüş dizileri ekrana yazar

import numpy as np  # NumPy kütüphanesini ekler

# NumPy Dizisi Üzerinde Arama
arr = np.array([10, 15, 20, 25, 30])  # Bir NumPy dizisi oluşturur ve bunu arr adlı değişkene atar
index = np.where(arr == 25)  # arr dizisinde 25 değerinin bulunduğu indeksleri arar ve bunu index adlı değişkene atar
print(index)  # 25 değerinin dizideki indeksini ekrana yazar

import numpy as np  # NumPy kütüphanesini ekler

# NumPy Dizi Sıralama
arr = np.array([42, 17, 8, 99, 23])  # Sıralanacak NumPy dizisini oluşturur ve bunu arr adlı değişkene atar
sorted_arr = np.sort(arr)  # Dizinin elemanlarını küçükten büyüğe sıralar ve bunu sorted_arr adlı değişkene atar
print(sorted_arr)  # Sıralanmış diziyi ekrana yazdırır

import numpy as np  # NumPy kütüphanesini ekler

# NumPy Dizi Filtreleme
arr = np.array([1, 2, 3, 4, 5, 6])  # İçinde sayılar bulunan bir NumPy dizisi oluşturur ve bunu arr adlı değişkene atar
cift_sayilar = arr[arr % 2 == 0]  # Yalnızca çift sayıları filtreleyerek yeni bir dizi oluşturur
print(cift_sayilar)  # Filtrelenmiş diziyi ekrana yazdırır